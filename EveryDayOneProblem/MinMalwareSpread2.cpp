//
// Created by ã€‚ on 2024/4/17.
//
#include <vector>
#include <unordered_map>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <string>
#include <deque>
#include <map>
#include <queue>
#include <cstring>
#include <algorithm>
#include <list>
#include <stack>
#include <climits>

using namespace std;

class Solution1 {
public:
    int minMalwareSpread(vector<vector<int>> &graph, vector<int> &initial) {
        int ans = graph.size() + 1;
        int ansIndex = 301;
        for (int i = 0; i < initial.size(); ++i) {
            queue<int> qq;
            vector<vector<int>> matrix(graph);
            vector<int> mapNum(graph.size(), 0);
            for (int j = 0; j < matrix.size(); ++j) {
                matrix[j][initial[i]] = 0;
            }
            for (int j = 0; j < matrix[initial[i]].size(); j++) {
                matrix[initial[i]][j] = 0;
            }
            for (int j = 0; j < initial.size(); ++j) {
                if (i == j)
                    continue;
                qq.push(initial[j]);
            }
            while (!qq.empty()) {
                int front = qq.front();
                qq.pop();
                if (mapNum[front])
                    continue;
                mapNum[front] = 1;
                for (int j = 0; j < matrix[front].size(); ++j) {
                    if (matrix[front][j])
                        qq.push(j);
                }
            }
            int count = 0;
            for (int j = 0; j < mapNum.size(); ++j) {
                if (mapNum[j])
                    count++;
            }
            if (count < ans) {
                ansIndex = initial[i];

                ans = count;
            } else if (count == ans) {
                ansIndex = min(ansIndex, initial[i]);
            }
        }
        return ansIndex;
    }
};
class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {

    }
};
