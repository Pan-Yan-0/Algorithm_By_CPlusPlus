//
// Created by ã€‚ on 2024/4/16.
//
#include <vector>
#include <unordered_map>
#include <cmath>
#include <algorithm>
#include <iostream>
#include <string>
#include <deque>
#include <map>
#include <queue>
#include <cstring>
#include <algorithm>
#include <list>
#include <stack>
#include <climits>

using namespace std;
class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        sort(initial.begin(), initial.end());
        int min = 301;
        int index= 0;
        for (int i = 0; i < initial.size(); ++i) {
            queue<int> qq;
            vector<bool> getMap(graph.size(),0);
            for (int j = 0; j < initial.size(); ++j) {
                if (i == j) continue;
                qq.push(initial[j]);
            }
            while (!qq.empty()){
                int front = qq.front();
                qq.pop();
                if (getMap[front]) continue;
                getMap[front] = 1;
                for (int j = 0; j < graph[front].size(); ++j) {
                    if (graph[front][j] && !getMap[j]){
                        qq.push(j);
                    }
                }
            }
            int count = 0;
            for (int j = 0; j < getMap.size(); ++j) {
                count += getMap[j];
            }
            if (count < min){
                min = count;
                index = initial[i];
            }
        }
        return index;
    }
};
